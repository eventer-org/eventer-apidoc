openapi: 3.0.1
info:
  title: eventer web api
  description: |-
    This is the official documentation of the (public) eventer web api, with which you can search and receive informations about events in Germany.<br /><br /><b>Note: Because this project is in beta stage the offered events are restricted to the Chemnitz area in Saxony / Germany.</b><br /><br />This API is used by [eventer.app](https://eventer.app), a mobile app to find local events.
    ## Making a request
    All URLs starts with `https://api.eventer.app/v1/`. The path is prefixed with the API version. If we change the API in backward-incompatible ways, we'll bump the version marker and maintain stable support for the old URLs.

    Here's a simple example to search for upcoming "Party"-events:

    [https://api.eventer.app/v1/events?search=Party](https://api.eventer.app/v1/events?search=Party)
    ## Date formats
    All timestamps (for requests and responses) are encoded in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) with the following format: `YYYY-MM-DD'T'HH:mm'Z'`. The timezone used in responses is `UTC`.
    ## Pagination and Limits
    Most collection APIs paginate their results. Normally you can specify a limit with the parameter `limit` which must be greater than 0 and lower than 101 (default: 10). If there are more results to paginate for, you will get a `cursor` in the response which can be used as parameter for the next request (e.g. `&cursor=foo`), and so on until you get a response without cursor.
    ## Authentication
    This is an open API, no authentication needed.
    ## Help us make it better
    Please tell us how we can make the API better. If you have a specific feature request or if you found a bug, please feel free to contact us.
  version: "1.0"
externalDocs:
  description: external doc comes here
servers:
- url: https://api.eventer.app/v1/
  variables: {}
paths:
  /events/{id}:
    get:
      tags:
      - /events
      summary: events/{id}
      description: Retrieve an event by id.
      operationId: getById
      parameters:
      - name: id
        in: path
        description: The id of the event to get.
        required: true
        schema:
          type: integer
          format: int64
          example: 6171211574804480
        example: 6171211574804480
      responses:
        200:
          description: The event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiEvent'
        404:
          description: Event not found.
  /events:
    get:
      tags:
      - /events
      summary: /events/
      description: Use this endpoint to search for events.<br /><br />All returned
        events will be primarily sorted by ```event.starts_at``` timestamps.
      operationId: search_get
      parameters:
      - name: search
        in: query
        description: Searches events by a free text search.
        schema:
          type: string
          format: string
          example: Party
        example: Party
      - name: starts_at_min
        in: query
        description: The minimum starts-at timestamp for events. If not given the
          default value will be now.
        schema:
          type: string
          format: date-time
          example: 2018-01-20T16:00:00.000Z
        example: 2018-01-20T16:00:00.000Z
      - name: starts_at_max
        in: query
        description: The maximum starts-at timestamp for events.
        schema:
          type: string
          format: date-time
          example: 2018-01-20T22:00:00.000Z
        example: 2018-01-20T22:00:00.000Z
      - name: categories
        in: query
        description: 'A comma separated list of event categories to search for (not
          all events are categorized yet). If not specified all events of all categories
          (or without category) will be returned.<br/><br/>Currently the following
          categories are supported: <br/>`exhibition`, `meetup`, `movie`'
        schema:
          type: string
          example: meetup
        example: meetup,movie
      - name: google_place_ids
        in: query
        schema:
          type: string
      - name: geo_area
        in: query
        schema:
          type: string
      - name: geo_raster_points
        in: query
        schema:
          type: string
      - name: contexts
        in: query
        schema:
          type: string
      - name: include_deleted
        in: query
        schema:
          type: string
      - name: include_places
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
      - name: cursor
        in: query
        schema:
          type: string
      - name: updated_since
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchEventsResponse'
    post:
      tags:
      - /events
      summary: /events/
      description: Use this endpoint to search for events.<br /><br />All returned
        events will be primarily sorted by ```event.starts_at``` timestamps.
      operationId: search_post
      requestBody:
        description: Defines search parameters to find events.
        content:
          application/json; charset="utf-8":
            schema:
              $ref: '#/components/schemas/SearchEventsRequest'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchEventsResponse'
  /places/{id}:
    get:
      tags:
      - /places
      operationId: getById_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json; charset="utf-8": {}
  /places:
    get:
      tags:
      - /places
      operationId: byGooglePlaceIds_get
      parameters:
      - name: google_place_ids
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json; charset="utf-8":
              schema:
                $ref: '#/components/schemas/GetPlacesResponse'
    post:
      tags:
      - /places
      operationId: byGooglePlaceIds_post
      requestBody:
        content:
          application/json; charset="utf-8":
            schema:
              $ref: '#/components/schemas/GetPlacesRequest'
      responses:
        default:
          description: default response
          content:
            application/json; charset="utf-8":
              schema:
                $ref: '#/components/schemas/GetPlacesResponse'
components:
  schemas:
    ApiEvent:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        categories:
          uniqueItems: true
          type: array
          items:
            type: string
        link:
          type: string
        contexts:
          uniqueItems: true
          type: array
          items:
            type: string
        google_place_id:
          type: string
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
        starts_at:
          type: string
          format: date-time
    GeoArea:
      type: object
      properties:
        bottom:
          type: number
          format: double
        top:
          type: number
          format: double
        right:
          type: number
          format: double
        left:
          type: number
          format: double
    IncludeType:
      type: object
      properties:
        places:
          type: object
    Location:
      type: object
      properties:
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
    Place:
      type: object
      properties:
        name:
          type: string
        location:
          $ref: '#/components/schemas/Location'
        google_place_id:
          type: string
        primary_google_place_id:
          type: string
        website_url:
          type: string
    SearchEventsRequest:
      type: object
      properties:
        search:
          type: string
        limit:
          type: integer
          format: int32
        cursor:
          type: string
        starts_at_min:
          type: string
          format: date-time
        starts_at_max:
          type: string
          format: date-time
        categories:
          type: array
          items:
            type: string
        google_place_ids:
          type: array
          items:
            type: string
        geo_area:
          $ref: '#/components/schemas/GeoArea'
        geo_raster_points:
          type: array
          items:
            type: array
            items:
              type: number
              format: double
        contexts:
          type: array
          items:
            type: string
        include:
          $ref: '#/components/schemas/IncludeType'
        updated_since:
          type: string
          format: date-time
    SearchEventsResponse:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/ApiEvent'
        places:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Place'
        cursor:
          type: string
        request:
          $ref: '#/components/schemas/SearchEventsRequest'
        timestamp:
          type: string
          format: date-time
        primary_google_place_ids:
          type: object
          additionalProperties:
            type: string
    GetPlacesRequest:
      type: object
      properties:
        google_place_ids:
          type: array
          items:
            type: string
    GetPlacesResponse:
      type: object
      properties:
        places:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Place'
        request:
          $ref: '#/components/schemas/GetPlacesRequest'
        timestamp:
          type: string
          format: date-time
